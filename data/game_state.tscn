[gd_scene load_steps=9 format=2]

[ext_resource path="res://scripts/vital_need.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node


# Game State
# @author Alberto Blanco Celdrán
# @date 02/10/2021 10:11
# Stores the current game status.

signal tick

onready var tick: Timer = $tick
onready var date: Node = $date
onready var health: Node = $health
onready var hunger: Node = $hunger
onready var thirst: Node = $thirst
onready var hygene: Node = $hygene
onready var mood: Node = $mood
onready var inventory: Node = $inventory
onready var money: Node = $money

export (float) var tick_rate = 1

# Called when the node enters the scene tree for the first time.
func _ready():
	tick.connect('timeout', self, '_on_tick')
	tick.start()


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Stops the game ticking.
func stop_tick():
	tick.stop()


# Resumes game ticking.
func resume_tick():
	tick.start()


# Resets all variables to default.
func reset():
	for child in get_children():
		if child.has_method('reset'):
			child.reset() # reset the child's value to default


# Called on every game tick.
func _on_tick():
	emit_signal('tick', tick_rate)
"

[sub_resource type="GDScript" id=2]
script/source = "extends 'res://scripts/game_variable.gd'


# Calendar
# @author Alberto Blanco Celdrán
# @date 02/10/2021 13:59
# Tracks the in-game current time.

signal date_changed

var day: int = 0 # current day
var hour: int = 0 # current hour
var minutes: int = 0 # current minutes
var seconds: float = 0 # current seconds


# Called when the node enters the scene tree for the first time.
func _ready():
	GameState.connect('tick', self, 'tick')


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Advances the calendar the given amount of seconds.
# @param seconds elapsed
func tick(delta: float):
	# get the variables necessary for the transform
	var total_hours: int = floor(delta / 3600)
	var total_minutes: int = floor(delta / 60)
	
	# extract the different date components
	var days: int = floor(delta / 86400)
	var hours = total_hours  - (days * 24)
	var minutes = total_minutes - (total_hours * 60)
	var seconds: float = delta - (total_minutes * 60)
	
	# whether the seconds make a minute pass
	self.seconds += seconds
	if self.seconds >= 60:
		minutes += 1
		self.seconds = self.seconds - 60
	
	# whether the minutes make an hour pass
	self.minutes += minutes
	if self.minutes >= 60:
		hours += 1
		self.minutes = self.minutes - 60
			
	
	# whether the hours make a day pass
	self.hour += hours
	if self.hour >= 24:
		days += 1
		self.hour = self.hour - 24
	
	# increase day
	self.day += days
	
	# generic signal
	if delta > 0:
		emit_signal('date_changed', self.day, self.hour, self.minutes, self.seconds)


# @override
func reset():
	day = 0
	hour = 0
	minutes = 0
	seconds = 0
	emit_signal('date_changed', day, hour, minutes, seconds)
"

[sub_resource type="GDScript" id=3]
script/source = "extends 'res://scripts/mood_need.gd'


# Health
# Declare member variables here. Examples:
# @date 02/10/2021 10:23
# Indicates how healthy is the cat -- the deciding factor in the game over

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func _on_value_changed(_old: float, value: float):
	._on_value_changed(_old, value)
	if value <= 0: # game over
		pass # TODO: implement Game Over state
"

[sub_resource type="GDScript" id=4]
script/source = "extends 'res://scripts/mood_need.gd'


# Hygene
# @author Alberto Blanco Celdrán
# @date 02/10/2021 17:47
# Represents the current cat's hygene.

export (float) var decrease_rate


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func tick(delta: float):
	set_value(get_value() - (decrease_rate * delta))
"

[sub_resource type="GDScript" id=5]
script/source = "extends 'res://scripts/need.gd'


# Mood
# @author Alberto Blanco Celdrán
# @date 02/10/2021 17:54
# Represent's the current cat's mood

var mods: Dictionary
var negative_mods: Dictionary # these prevent the effects of good


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Adds a stat modifier to be applied each tick.
# @param name
# @param value
func add_modifier(name: String, value: float):
	mods[name] = value
	if value < 0:
		negative_mods[name] = true
	else:
		negative_mods.erase(name)


# Removes a stat modified.
func remove_modifier(name: String):
	mods.erase(name)
	negative_mods.erase(name)


# @override
func tick(delta: float):
	# get the final value to add
	var value: float
	if negative_mods.size() > 0:
		for mod in negative_mods:
			value += mods.get(mod)
	else:
		for mod in mods:
			value += mods.get(mod)
	set_value(get_value() + (value * delta))
"

[sub_resource type="GDScript" id=6]
script/source = "extends Node


# Inventory
# @author Alberto Blanco Celdrán
# @date 04/10/2021 1:03
# Stores the player's items.

signal item_added
signal item_removed
signal items_cleared


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Adds a new item stack (or adds to its amount)
func add_item(item: String, amount: int):
	if amount > 0:
		if not has_node(item):
			var instance: Node = Items.get(item).stack.instance()
			instance.set_name(item)
			instance.amount = amount
			add_child(instance)
			emit_signal('item_added', item)
		else:
			get_node(item).add_amount(amount)
	else:
		var node = get_node(item)
		if node.amount - amount <= 0:
			emit_signal('item_removed', item)
		node.add_amount(amount)


# Clear an item stack.
func clear_item(item: String):
	if has_node(item):
		get_node(item).remove()
		emit_signal('item_removed', item)


# Clears all items.
func clear():
	for child in get_children():
		child.queue_free()
	emit_signal('items_cleared')
"

[sub_resource type="GDScript" id=7]
script/source = "extends 'res://scripts/game_variable.gd'


# Money
# @author Alberto Blanco Celdrán
# @date 04/10/2021 2:57
# The current player money available for cat's expenses.

signal changed

var balance: float


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Sets the balance.
# @param amount to set as
func set_balance(amount: float):
	balance = max(amount, 0)
	emit_signal('changed')


# Adds the given amount to the balance.
# @param amount to add
func add_balance(amount: float):
	set_balance(balance + amount)


# Returns the current balance.
# @return balance
func get_balance() -> float:
	return balance


# Whether the amount can be afforded.
func can_afford(cost: float) -> bool:
	return cost <= balance
"

[node name="game_state" type="Node"]
script = SubResource( 1 )

[node name="tick" type="Timer" parent="."]

[node name="date" type="Node" parent="."]
script = SubResource( 2 )

[node name="health" type="Node" parent="."]
script = SubResource( 3 )
max_value = 100.0
default_value = 100.0
mood_penalty = 0.1
mood_recovery = 0.1
low_threshold = 40.0
high_threshold = 60.0

[node name="hunger" type="Node" parent="."]
script = ExtResource( 1 )
max_value = 100.0
default_value = 100.0
mood_penalty = 0.1
mood_recovery = 0.1
low_threshold = 40.0
high_threshold = 70.0
_health = NodePath("../health")
expense_rate = 1.0
damage_rate = 2.0

[node name="thirst" type="Node" parent="."]
script = ExtResource( 1 )
max_value = 100.0
default_value = 100.0
mood_penalty = 0.1
mood_recovery = 0.1
low_threshold = 30.0
high_threshold = 60.0
_health = NodePath("../health")
expense_rate = 3.0
damage_rate = 5.0

[node name="hygene" type="Node" parent="."]
script = SubResource( 4 )
max_value = 100.0
default_value = 100.0
mood_penalty = 0.1
mood_recovery = 0.1
low_threshold = 33.0
high_threshold = 75.0
decrease_rate = 1.0

[node name="mood" type="Node" parent="."]
script = SubResource( 5 )
max_value = 100.0
default_value = 100.0

[node name="inventory" type="Node" parent="."]
script = SubResource( 6 )

[node name="money" type="Node" parent="."]
script = SubResource( 7 )
