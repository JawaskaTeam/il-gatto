[gd_scene load_steps=11 format=2]

[ext_resource path="res://animations/makkuro.tres" type="SpriteFrames" id=1]
[ext_resource path="res://scripts/idle_action.gd" type="Script" id=2]
[ext_resource path="res://assets/shadow.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


# Roaming cat
# @author Alberto Blanco Celdrán
# @date 02/10/2021 15:00
# Physical representation of the cat in the hub.

signal stopped_moving

enum ANIMATION_VARIANT { Idle, Meow, Blink, MeowBlink }

const IN_CLICK: String = 'click'

onready var sprite: AnimatedSprite = $sprite
onready var meow_delay: Timer = $meow_delay
onready var meow: AudioStreamPlayer2D = $meow
onready var blink: Timer = $blink
onready var click_area: Area2D = $click_area
onready var _pet_cooldown: Timer = $pet_cooldown
onready var boredom: Timer = $boredom
onready var random := RandomNumberGenerator.new()
onready var meows: Array = []
onready var animation_variants: Dictionary = {
	'idle': AnimationVariant.new('blink', 'meow', 'blink_meow')
}
onready var action_walk: Node = $walk
onready var action_idle: Node = $idle
onready var action_wait: Node = $wait_anim

export (float) var max_meow_delay # longest time without meowing
export (float) var min_meow_delay # shortest time without meowing
export (float) var blink_frequency # how often does the cat blink
export (float) var blink_meow_margin # time difference between meow and blink for making both
export (float) var walk_speed # how fast does the cat move
export (float) var max_sit_time # longest time sitting down
export (float) var min_sit_time # shortest time sitting down
export (float) var max_distance # longest distance that the cat will walk
export (float) var pet_cooldown # how long until we can pet the cat again
export (float) var pet_mood_boost # how much mood does petting increase
export (float) var boredom_delay # how long until the cat bores themselves
export (float) var boredom_mood_penalty # how much mood is lost per tick when bored
export (Rect2) var walkable_space # where can the cat walk by

# movement
var spawn_pos: Vector2 # where the cat did spawn
var move_pos: Vector2 # where the cat will try to go
var is_moving: bool # whether the cat is moving

# animation
var is_variant_playing: bool # whether the sprite is running a variant animation
var previous_animation: String # which animation was playing previous to the variant

# action queue
var queue: Array = [] # actions awaiting to be called
var active_action: Node # current action waiting to be finished

# Called when the node enters the scene tree for the first time.
func _ready():
	# get spawn pos
	spawn_pos = transform.origin
	
	# load meowing sounds
	for i in range(1, 12):
		meows.push_front(load(str('res://assets/audio/sounds/makkuro_meow/meow', i, '.mp3')))
	
	# initialize petting cooldown
	_pet_cooldown.set_wait_time(pet_cooldown)
	
	# initialize boredom timer
	boredom.set_wait_time(boredom_delay)
	boredom.connect('timeout', self, '_on_bored')
	
	# connect with entity placing
	get_parent().connect('entity_placed', self, '_on_entity_placed')
	
	# initialize meow delay
	meow_delay.connect('timeout', self, '_on_meow')
	next_meow() # setup first meow
	meow_delay.start() # start meow timer
	
	# initialize blinking
	blink.connect('timeout', self, '_on_blink')
	blink.start(blink_frequency) # start blink timer
	
	# connect sprite animation ending
	sprite.connect('animation_finished', self, '_on_animation_ended')
	
	# the cat will spawn sitting down
	sit()


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# Called every physics frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	_handle_movement(delta)
	

# Makes the cat move to a certain location
# @param target location
func go_to(target: Vector2):
	move_pos = target
	is_moving = true


# Makes the cat stop on their tracks.
func stop_moving():
	is_moving = false
	emit_signal('stopped_moving')


# Used when playing animations with variants. It will be ignored if the same animation is already running.
# @param animation
# @param variant to play
func play_animation_variant(animation: String, variant: int = ANIMATION_VARIANT.Idle):
	var previous = animation # store the previous animation used
	
	# if we have an animation variant, select it
	if animation_variants.has(animation):
		var variants: AnimationVariant = animation_variants[animation]
		match variant:
			ANIMATION_VARIANT.Meow:
				animation = variants.meow
			ANIMATION_VARIANT.Blink:
				animation = variants.blink
			ANIMATION_VARIANT.MeowBlink:
				animation = variants.meow_blink

	# play the selected animation
	if animation != sprite.animation:
		is_variant_playing = true
		previous_animation = previous
		sprite.play(animation)


# Sets a new delay for the next meow.
func next_meow():
	meow_delay.set_wait_time(random.randi_range(min_meow_delay, max_meow_delay))


# Whether the cat should meow and blink at the same time.
# @return should do both
func is_meow_blink_valid() -> bool:
	return blink.time_left < blink_meow_margin and meow_delay.time_left < blink_meow_margin


# Queues the given action.
# @param action
# @param arguments
func add_action(action: Node, args: Array = []):
	queue.push_back(QueuedAction.new(action, args))
	
	# automatically run the action if there aren't any other running
	if not active_action:
		next_action()


# Starts the next action.
func next_action():
	if queue.size() > 0:
		var action = queue[0]
		action.action.connect('action_ended', self, '_on_action_ended')
		active_action = action.action
		action.action.start(action.args)
		queue.remove(0)


# Skips the current action.
func skip_action():
	if active_action:
		active_action.stop()
		active_action = null
	next_action()


# Clears all actions.
func clear_actions():
	queue.clear()


# Queues a walking action to a random location.
func walk():
	# calculate where the cat is relatively going to
	var x = random.randi_range(-max_distance, max_distance)
	var y = random.randi_range(-max_distance, max_distance)

	# calculate new position
	var new_pos = spawn_pos + Vector2(clamp(x, walkable_space.position.x, walkable_space.end.x), clamp(y, walkable_space.position.y, walkable_space.end.y))
	add_action(action_walk, [new_pos])


# Queues a sitting action.
func sit():
	add_action(action_idle, [random.randi_range(min_sit_time, max_sit_time)])


# Improves the cat mood and applies a cooldown.
func pet():
	GameState.mood.set_value(GameState.mood.get_value() + pet_mood_boost)
	_pet_cooldown.start()
	# TODO: show visual cue


# Catches mouse input to proceed.
func _input(event: InputEvent):
	if event is InputEventMouseButton and event.is_action_pressed(IN_CLICK) and GameState.can_click:
		var cat = get_parent().cat
		var size: Vector2 = cat.click_area.get_node('shape').shape.get_extents()
		var rect := Rect2(cat.click_area.position - size * .5, size)
		if rect.has_point(cat.to_local(event.position)):
			_on_click()


# Called when the cat is touched.
func _on_click():
	if active_action and active_action.has_method('cancel'):
		if active_action.cancel():
			_pet_cooldown.start()
	else:
		if _pet_cooldown.is_stopped():
			GameState.mood.set_value(GameState.mood.get_value() - pet_mood_boost)
			GameState.mood.remove_modifier('bored')
			_pet_cooldown.start()


# Called when the cat gets bored.
func _on_bored():
	GameState.mood.add_modifier('bored', boredom_mood_penalty)


# Chooses the next action that the cat should perform.
# @param last action performed
func _choose_behaviour(last_action: Node):
	match last_action:
		action_walk:
			sit()
		action_idle:
			walk()


# Handles cat movement.
# @param physics delta
func _handle_movement(delta: float):
	if is_moving:
		# move towards the desired location
		transform.origin = transform.origin.move_toward(move_pos, delta * walk_speed)
		
		# once the location has been reached, stop moving
		if transform.origin == move_pos:
			stop_moving()


# Called when the cat's supposed to meow.
func _on_meow():
	# if there's already a variant being played, do not override
	if is_variant_playing:
		return
	
	# select animation
	var variant = ANIMATION_VARIANT.Meow
	if is_meow_blink_valid():
		variant = ANIMATION_VARIANT.MeowBlink
	
	# play animation
	play_animation_variant(sprite.animation, variant) # play animation variant
	meow.set_stream(meows[random.randi_range(0, meows.size() - 1)]) # select sound to play
	meow.play() # play selected sound


# Called when the cat's supposed to blink.
func _on_blink():
	# if there's already a variant being played, do not override
	if is_variant_playing:
		return
	
	# select animation
	var variant = ANIMATION_VARIANT.Blink
	if is_meow_blink_valid():
		variant = ANIMATION_VARIANT.MeowBlink
	
	# play animation
	play_animation_variant(sprite.animation, variant)


# Called when the current animation ends.
func _on_animation_ended():
	if is_variant_playing:
		sprite.play(previous_animation)
		is_variant_playing = false


# Called when an action ended. Triggering the next one.
func _on_action_ended(action: Node):
	_choose_behaviour(action)
	action.disconnect('action_ended', self, '_on_action_ended')
	active_action = null
	next_action()


# Called when an entity is placed by the player.
func _on_entity_placed(entity):
	pass
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 64, 32 )

[sub_resource type="GDScript" id=3]
script/source = "extends 'res://scripts/action.gd'


# Walking action
# @author Alberto Blanco Celdrán
# @date 03/10/2021 23:56
# Makes the cat walk from one point to another.


# Called when the node enters the scene tree for the first time.
func _ready():
	pass


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func start(args: Array = []):
	if args.size() <= 0:
		push_error('No position specified.')
	cat.connect('stopped_moving', self, 'end')
	cat.go_to(args[0])
	.start(args)


# @override
func end():
	cat.disconnect('stopped_moving', self, 'end')
	.end()
"

[sub_resource type="GDScript" id=4]
script/source = "extends 'res://scripts/action.gd'


# Wait action
# @author Alberto Blanco Celdrán
# @date 04/10/2021 00:19
# Runs an animation that pauses the queue.


# Called when the node enters the scene tree for the first time.
func _ready():
	pass


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func start(args: Array = []):
	# play animation only if provided
	if args.size() > 0:
		cat.sprite.play(args[0])
	cat.sprite.connect('animation_finished', self, 'end')
	.start(args)


# @override
func end():
	cat.sprite.disconnect('animation_finished', self, 'end')
	.end()
"

[sub_resource type="GDScript" id=5]
script/source = "extends 'res://scripts/cancel_action.gd'


# Eating action
# @author Alberto Blanco Celdrán
# @date 05/10/2021 0:26
# Makes the cat eat.

export (float) var hunger_restored


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func end():
	GameState.hunger.set_value(GameState.hunger.get_value() + hunger_restored)
	.end()
"

[sub_resource type="GDScript" id=6]
script/source = "extends 'res://scripts/cancel_action.gd'


# Drink action
# @author Alberto Blanco Celdrán
# @date 05/10/2021 0:33
# Makes the cat drink.

export (float) var thirst_restored


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


# @override
func end():
	GameState.thirst.set_value(GameState.thirst.get_value() + thirst_restored)
	.end()
"

[sub_resource type="GDScript" id=7]
script/source = "extends 'res://scripts/cancel_action.gd'


# Littering
# @author Alberto Blanco Celdrán
# @date 05/10/2021 0:44
# Makes the cat use the litter box.


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[node name="cat" type="Node2D"]
script = SubResource( 1 )
max_meow_delay = 20.0
min_meow_delay = 6.0
blink_frequency = 5.0
blink_meow_margin = 1.0
walk_speed = 5.0
max_sit_time = 2.0
min_sit_time = 1.0
max_distance = 300.0
pet_cooldown = 30.0
pet_mood_boost = 15.0
boredom_delay = 60.0
boredom_mood_penalty = 0.2
walkable_space = Rect2( 190, -32, 410, 50 )

[node name="click_area" type="Area2D" parent="."]

[node name="shape" type="CollisionShape2D" parent="click_area"]
shape = SubResource( 2 )

[node name="sprite" type="AnimatedSprite" parent="."]
frames = ExtResource( 1 )
animation = "idle"
frame = 2
playing = true

[node name="meow_delay" type="Timer" parent="."]

[node name="blink" type="Timer" parent="."]

[node name="pet_cooldown" type="Timer" parent="."]
one_shot = true

[node name="boredom" type="Timer" parent="."]

[node name="meow" type="AudioStreamPlayer2D" parent="."]

[node name="walk" type="Node" parent="."]
script = SubResource( 3 )

[node name="idle" type="Node" parent="."]
script = ExtResource( 2 )

[node name="timer" type="Timer" parent="idle"]
one_shot = true

[node name="wait_anim" type="Node" parent="."]
script = SubResource( 4 )

[node name="eat" type="Node" parent="."]
script = SubResource( 5 )
mood_penalty = 10.0
hunger_restored = 66.0

[node name="timer" type="Timer" parent="eat"]
wait_time = 5.0
one_shot = true

[node name="drink" type="Node" parent="."]
script = SubResource( 6 )
mood_penalty = 15.0

[node name="timer" type="Timer" parent="drink"]
wait_time = 5.0
one_shot = true

[node name="litter" type="Node" parent="."]
script = SubResource( 7 )
mood_penalty = 30.0

[node name="timer" type="Timer" parent="litter"]
wait_time = 6.0
one_shot = true

[node name="shadow" type="Sprite" parent="."]
position = Vector2( -25.4829, 24.9643 )
z_index = -1
texture = ExtResource( 3 )
